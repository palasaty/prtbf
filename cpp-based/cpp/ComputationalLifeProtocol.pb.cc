// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ComputationalLifeProtocol.proto

#include "ComputationalLifeProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowConditionData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarchData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PressureConditionData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopData_ComputationalLifeProtocol_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ComputationalLifeProtocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceData_ComputationalLifeProtocol_2eproto;
class FlowConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowConditionData> _instance;
} _FlowConditionData_default_instance_;
class PressureConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PressureConditionData> _instance;
} _PressureConditionData_default_instance_;
class ConcentrationConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConcentrationConditionData> _instance;
} _ConcentrationConditionData_default_instance_;
class SubstanceDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubstanceData> _instance;
} _SubstanceData_default_instance_;
class BoundaryConditionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryConditionData> _instance;
} _BoundaryConditionData_default_instance_;
class BoundaryConditionsDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryConditionsData> _instance;
} _BoundaryConditionsData_default_instance_;
class BoundaryConditionsListDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundaryConditionsListData> _instance;
} _BoundaryConditionsListData_default_instance_;
class MarchDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarchData> _instance;
} _MarchData_default_instance_;
class StopDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopData> _instance;
} _StopData_default_instance_;
class ModelInterchangeDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInterchangeData> _instance;
  const ::BoundaryConditionsListData* boundaryexchangelist_;
  const ::MarchData* march_;
  const ::StopData* stop_;
} _ModelInterchangeData_default_instance_;
static void InitDefaultsscc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BoundaryConditionData_default_instance_;
    new (ptr) ::BoundaryConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BoundaryConditionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto}, {
      &scc_info_FlowConditionData_ComputationalLifeProtocol_2eproto.base,
      &scc_info_PressureConditionData_ComputationalLifeProtocol_2eproto.base,
      &scc_info_SubstanceData_ComputationalLifeProtocol_2eproto.base,}};

static void InitDefaultsscc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BoundaryConditionsData_default_instance_;
    new (ptr) ::BoundaryConditionsData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BoundaryConditionsData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto}, {
      &scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto.base,}};

static void InitDefaultsscc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BoundaryConditionsListData_default_instance_;
    new (ptr) ::BoundaryConditionsListData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BoundaryConditionsListData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto}, {
      &scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto.base,}};

static void InitDefaultsscc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ConcentrationConditionData_default_instance_;
    new (ptr) ::ConcentrationConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ConcentrationConditionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto}, {}};

static void InitDefaultsscc_info_FlowConditionData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_FlowConditionData_default_instance_;
    new (ptr) ::FlowConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::FlowConditionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowConditionData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FlowConditionData_ComputationalLifeProtocol_2eproto}, {}};

static void InitDefaultsscc_info_MarchData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MarchData_default_instance_;
    new (ptr) ::MarchData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MarchData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarchData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MarchData_ComputationalLifeProtocol_2eproto}, {}};

static void InitDefaultsscc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ModelInterchangeData_default_instance_;
    new (ptr) ::ModelInterchangeData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ModelInterchangeData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto}, {
      &scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto.base,
      &scc_info_MarchData_ComputationalLifeProtocol_2eproto.base,
      &scc_info_StopData_ComputationalLifeProtocol_2eproto.base,}};

static void InitDefaultsscc_info_PressureConditionData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PressureConditionData_default_instance_;
    new (ptr) ::PressureConditionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PressureConditionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PressureConditionData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PressureConditionData_ComputationalLifeProtocol_2eproto}, {}};

static void InitDefaultsscc_info_StopData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StopData_default_instance_;
    new (ptr) ::StopData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StopData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopData_ComputationalLifeProtocol_2eproto}, {}};

static void InitDefaultsscc_info_SubstanceData_ComputationalLifeProtocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SubstanceData_default_instance_;
    new (ptr) ::SubstanceData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubstanceData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubstanceData_ComputationalLifeProtocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubstanceData_ComputationalLifeProtocol_2eproto}, {
      &scc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ComputationalLifeProtocol_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ComputationalLifeProtocol_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ComputationalLifeProtocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ComputationalLifeProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FlowConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::FlowConditionData, type_),
  PROTOBUF_FIELD_OFFSET(::FlowConditionData, ml_per_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PressureConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PressureConditionData, type_),
  PROTOBUF_FIELD_OFFSET(::PressureConditionData, mmhg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ConcentrationConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ConcentrationConditionData, type_),
  PROTOBUF_FIELD_OFFSET(::ConcentrationConditionData, mg_per_ml_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SubstanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SubstanceData, name_),
  PROTOBUF_FIELD_OFFSET(::SubstanceData, concentration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, id_),
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, name_),
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, flow_),
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, pressure_),
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionData, substance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionsData, inlet_),
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionsData, outlet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionsListData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BoundaryConditionsListData, boundaryconditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MarchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MarchData, duration_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StopData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModelInterchangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ModelInterchangeData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ModelInterchangeDataDefaultTypeInternal, boundaryexchangelist_),
  offsetof(::ModelInterchangeDataDefaultTypeInternal, march_),
  offsetof(::ModelInterchangeDataDefaultTypeInternal, stop_),
  PROTOBUF_FIELD_OFFSET(::ModelInterchangeData, Command_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::FlowConditionData)},
  { 7, -1, sizeof(::PressureConditionData)},
  { 14, -1, sizeof(::ConcentrationConditionData)},
  { 21, -1, sizeof(::SubstanceData)},
  { 28, -1, sizeof(::BoundaryConditionData)},
  { 38, -1, sizeof(::BoundaryConditionsData)},
  { 45, -1, sizeof(::BoundaryConditionsListData)},
  { 51, -1, sizeof(::MarchData)},
  { 57, -1, sizeof(::StopData)},
  { 62, -1, sizeof(::ModelInterchangeData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_FlowConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PressureConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ConcentrationConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SubstanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BoundaryConditionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BoundaryConditionsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BoundaryConditionsListData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MarchData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StopData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelInterchangeData_default_instance_),
};

const char descriptor_table_protodef_ComputationalLifeProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037ComputationalLifeProtocol.proto\"C\n\021Flo"
  "wConditionData\022\034\n\004Type\030\001 \001(\0162\016.eProperty"
  "Type\022\020\n\010mL_per_s\030\002 \001(\001\"C\n\025PressureCondit"
  "ionData\022\034\n\004Type\030\001 \001(\0162\016.ePropertyType\022\014\n"
  "\004mmHg\030\002 \001(\001\"M\n\032ConcentrationConditionDat"
  "a\022\034\n\004Type\030\001 \001(\0162\016.ePropertyType\022\021\n\tmg_pe"
  "r_mL\030\002 \001(\001\"Q\n\rSubstanceData\022\014\n\004Name\030\001 \001("
  "\t\0222\n\rConcentration\030\002 \001(\0132\033.Concentration"
  "ConditionData\"\240\001\n\025BoundaryConditionData\022"
  "\n\n\002ID\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022 \n\004Flow\030\003 \001(\0132"
  "\022.FlowConditionData\022(\n\010Pressure\030\004 \001(\0132\026."
  "PressureConditionData\022!\n\tSubstance\030\005 \003(\013"
  "2\016.SubstanceData\"g\n\026BoundaryConditionsDa"
  "ta\022%\n\005Inlet\030\001 \001(\0132\026.BoundaryConditionDat"
  "a\022&\n\006Outlet\030\002 \001(\0132\026.BoundaryConditionDat"
  "a\"Q\n\032BoundaryConditionsListData\0223\n\022Bound"
  "aryConditions\030\001 \003(\0132\027.BoundaryConditions"
  "Data\"\037\n\tMarchData\022\022\n\nDuration_s\030\001 \001(\001\"\n\n"
  "\010StopData\"\226\001\n\024ModelInterchangeData\022;\n\024Bo"
  "undaryExchangeList\030\001 \001(\0132\033.BoundaryCondi"
  "tionsListDataH\000\022\033\n\005March\030\002 \001(\0132\n.MarchDa"
  "taH\000\022\031\n\004Stop\030\003 \001(\0132\t.StopDataH\000B\t\n\007Comma"
  "nd*-\n\rePropertyType\022\r\n\tProviding\020\000\022\r\n\tRe"
  "quested\020\001B\032\n\026com.computational_lifeH\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ComputationalLifeProtocol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ComputationalLifeProtocol_2eproto_sccs[10] = {
  &scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_FlowConditionData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_MarchData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_PressureConditionData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_StopData_ComputationalLifeProtocol_2eproto.base,
  &scc_info_SubstanceData_ComputationalLifeProtocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ComputationalLifeProtocol_2eproto_once;
static bool descriptor_table_ComputationalLifeProtocol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ComputationalLifeProtocol_2eproto = {
  &descriptor_table_ComputationalLifeProtocol_2eproto_initialized, descriptor_table_protodef_ComputationalLifeProtocol_2eproto, "ComputationalLifeProtocol.proto", 965,
  &descriptor_table_ComputationalLifeProtocol_2eproto_once, descriptor_table_ComputationalLifeProtocol_2eproto_sccs, descriptor_table_ComputationalLifeProtocol_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_ComputationalLifeProtocol_2eproto::offsets,
  file_level_metadata_ComputationalLifeProtocol_2eproto, 10, file_level_enum_descriptors_ComputationalLifeProtocol_2eproto, file_level_service_descriptors_ComputationalLifeProtocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ComputationalLifeProtocol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ComputationalLifeProtocol_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ePropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ComputationalLifeProtocol_2eproto);
  return file_level_enum_descriptors_ComputationalLifeProtocol_2eproto[0];
}
bool ePropertyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FlowConditionData::InitAsDefaultInstance() {
}
class FlowConditionData::_Internal {
 public:
};

FlowConditionData::FlowConditionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlowConditionData)
}
FlowConditionData::FlowConditionData(const FlowConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ml_per_s_, &from.ml_per_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&ml_per_s_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:FlowConditionData)
}

void FlowConditionData::SharedCtor() {
  ::memset(&ml_per_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ml_per_s_)) + sizeof(type_));
}

FlowConditionData::~FlowConditionData() {
  // @@protoc_insertion_point(destructor:FlowConditionData)
  SharedDtor();
}

void FlowConditionData::SharedDtor() {
}

void FlowConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowConditionData& FlowConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowConditionData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void FlowConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:FlowConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ml_per_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&ml_per_s_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlowConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ePropertyType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::ePropertyType>(val));
        } else goto handle_unusual;
        continue;
      // double mL_per_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ml_per_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlowConditionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlowConditionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ePropertyType Type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ePropertyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mL_per_s = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ml_per_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlowConditionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlowConditionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlowConditionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlowConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // double mL_per_s = 2;
  if (!(this->ml_per_s() <= 0 && this->ml_per_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->ml_per_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:FlowConditionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowConditionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlowConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // double mL_per_s = 2;
  if (!(this->ml_per_s() <= 0 && this->ml_per_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->ml_per_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlowConditionData)
  return target;
}

size_t FlowConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlowConditionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mL_per_s = 2;
  if (!(this->ml_per_s() <= 0 && this->ml_per_s() >= 0)) {
    total_size += 1 + 8;
  }

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlowConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlowConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlowConditionData)
    MergeFrom(*source);
  }
}

void FlowConditionData::MergeFrom(const FlowConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlowConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ml_per_s() <= 0 && from.ml_per_s() >= 0)) {
    set_ml_per_s(from.ml_per_s());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void FlowConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlowConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowConditionData::CopyFrom(const FlowConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlowConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowConditionData::IsInitialized() const {
  return true;
}

void FlowConditionData::InternalSwap(FlowConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ml_per_s_, other->ml_per_s_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PressureConditionData::InitAsDefaultInstance() {
}
class PressureConditionData::_Internal {
 public:
};

PressureConditionData::PressureConditionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PressureConditionData)
}
PressureConditionData::PressureConditionData(const PressureConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mmhg_, &from.mmhg_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&mmhg_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:PressureConditionData)
}

void PressureConditionData::SharedCtor() {
  ::memset(&mmhg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mmhg_)) + sizeof(type_));
}

PressureConditionData::~PressureConditionData() {
  // @@protoc_insertion_point(destructor:PressureConditionData)
  SharedDtor();
}

void PressureConditionData::SharedDtor() {
}

void PressureConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PressureConditionData& PressureConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PressureConditionData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void PressureConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:PressureConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mmhg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mmhg_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PressureConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ePropertyType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::ePropertyType>(val));
        } else goto handle_unusual;
        continue;
      // double mmHg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mmhg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PressureConditionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PressureConditionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ePropertyType Type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ePropertyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mmHg = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mmhg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PressureConditionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PressureConditionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PressureConditionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PressureConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // double mmHg = 2;
  if (!(this->mmhg() <= 0 && this->mmhg() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->mmhg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PressureConditionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* PressureConditionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PressureConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // double mmHg = 2;
  if (!(this->mmhg() <= 0 && this->mmhg() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->mmhg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PressureConditionData)
  return target;
}

size_t PressureConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PressureConditionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mmHg = 2;
  if (!(this->mmhg() <= 0 && this->mmhg() >= 0)) {
    total_size += 1 + 8;
  }

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PressureConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PressureConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const PressureConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PressureConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PressureConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PressureConditionData)
    MergeFrom(*source);
  }
}

void PressureConditionData::MergeFrom(const PressureConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PressureConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mmhg() <= 0 && from.mmhg() >= 0)) {
    set_mmhg(from.mmhg());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PressureConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PressureConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressureConditionData::CopyFrom(const PressureConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PressureConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressureConditionData::IsInitialized() const {
  return true;
}

void PressureConditionData::InternalSwap(PressureConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mmhg_, other->mmhg_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PressureConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConcentrationConditionData::InitAsDefaultInstance() {
}
class ConcentrationConditionData::_Internal {
 public:
};

ConcentrationConditionData::ConcentrationConditionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConcentrationConditionData)
}
ConcentrationConditionData::ConcentrationConditionData(const ConcentrationConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mg_per_ml_, &from.mg_per_ml_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&mg_per_ml_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ConcentrationConditionData)
}

void ConcentrationConditionData::SharedCtor() {
  ::memset(&mg_per_ml_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mg_per_ml_)) + sizeof(type_));
}

ConcentrationConditionData::~ConcentrationConditionData() {
  // @@protoc_insertion_point(destructor:ConcentrationConditionData)
  SharedDtor();
}

void ConcentrationConditionData::SharedDtor() {
}

void ConcentrationConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConcentrationConditionData& ConcentrationConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConcentrationConditionData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void ConcentrationConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:ConcentrationConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mg_per_ml_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mg_per_ml_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConcentrationConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ePropertyType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::ePropertyType>(val));
        } else goto handle_unusual;
        continue;
      // double mg_per_mL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mg_per_ml_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConcentrationConditionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConcentrationConditionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ePropertyType Type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ePropertyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mg_per_mL = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mg_per_ml_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConcentrationConditionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConcentrationConditionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConcentrationConditionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConcentrationConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // double mg_per_mL = 2;
  if (!(this->mg_per_ml() <= 0 && this->mg_per_ml() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->mg_per_ml(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConcentrationConditionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConcentrationConditionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConcentrationConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // double mg_per_mL = 2;
  if (!(this->mg_per_ml() <= 0 && this->mg_per_ml() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->mg_per_ml(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConcentrationConditionData)
  return target;
}

size_t ConcentrationConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConcentrationConditionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double mg_per_mL = 2;
  if (!(this->mg_per_ml() <= 0 && this->mg_per_ml() >= 0)) {
    total_size += 1 + 8;
  }

  // .ePropertyType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConcentrationConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConcentrationConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConcentrationConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConcentrationConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConcentrationConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConcentrationConditionData)
    MergeFrom(*source);
  }
}

void ConcentrationConditionData::MergeFrom(const ConcentrationConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConcentrationConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.mg_per_ml() <= 0 && from.mg_per_ml() >= 0)) {
    set_mg_per_ml(from.mg_per_ml());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void ConcentrationConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConcentrationConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcentrationConditionData::CopyFrom(const ConcentrationConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConcentrationConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcentrationConditionData::IsInitialized() const {
  return true;
}

void ConcentrationConditionData::InternalSwap(ConcentrationConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mg_per_ml_, other->mg_per_ml_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConcentrationConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubstanceData::InitAsDefaultInstance() {
  ::_SubstanceData_default_instance_._instance.get_mutable()->concentration_ = const_cast< ::ConcentrationConditionData*>(
      ::ConcentrationConditionData::internal_default_instance());
}
class SubstanceData::_Internal {
 public:
  static const ::ConcentrationConditionData& concentration(const SubstanceData* msg);
};

const ::ConcentrationConditionData&
SubstanceData::_Internal::concentration(const SubstanceData* msg) {
  return *msg->concentration_;
}
SubstanceData::SubstanceData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubstanceData)
}
SubstanceData::SubstanceData(const SubstanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_concentration()) {
    concentration_ = new ::ConcentrationConditionData(*from.concentration_);
  } else {
    concentration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SubstanceData)
}

void SubstanceData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubstanceData_ComputationalLifeProtocol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  concentration_ = nullptr;
}

SubstanceData::~SubstanceData() {
  // @@protoc_insertion_point(destructor:SubstanceData)
  SharedDtor();
}

void SubstanceData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete concentration_;
}

void SubstanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubstanceData& SubstanceData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubstanceData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void SubstanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:SubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && concentration_ != nullptr) {
    delete concentration_;
  }
  concentration_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubstanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "SubstanceData.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ConcentrationConditionData Concentration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_concentration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubstanceData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubstanceData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SubstanceData.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ConcentrationConditionData Concentration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_concentration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubstanceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubstanceData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubstanceData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubstanceData.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .ConcentrationConditionData Concentration = 2;
  if (this->has_concentration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::concentration(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubstanceData)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubstanceData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SubstanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SubstanceData.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .ConcentrationConditionData Concentration = 2;
  if (this->has_concentration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::concentration(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubstanceData)
  return target;
}

size_t SubstanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubstanceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .ConcentrationConditionData Concentration = 2;
  if (this->has_concentration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *concentration_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubstanceData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  const SubstanceData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubstanceData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubstanceData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubstanceData)
    MergeFrom(*source);
  }
}

void SubstanceData::MergeFrom(const SubstanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubstanceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_concentration()) {
    mutable_concentration()->::ConcentrationConditionData::MergeFrom(from.concentration());
  }
}

void SubstanceData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubstanceData::CopyFrom(const SubstanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubstanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubstanceData::IsInitialized() const {
  return true;
}

void SubstanceData::InternalSwap(SubstanceData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(concentration_, other->concentration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubstanceData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundaryConditionData::InitAsDefaultInstance() {
  ::_BoundaryConditionData_default_instance_._instance.get_mutable()->flow_ = const_cast< ::FlowConditionData*>(
      ::FlowConditionData::internal_default_instance());
  ::_BoundaryConditionData_default_instance_._instance.get_mutable()->pressure_ = const_cast< ::PressureConditionData*>(
      ::PressureConditionData::internal_default_instance());
}
class BoundaryConditionData::_Internal {
 public:
  static const ::FlowConditionData& flow(const BoundaryConditionData* msg);
  static const ::PressureConditionData& pressure(const BoundaryConditionData* msg);
};

const ::FlowConditionData&
BoundaryConditionData::_Internal::flow(const BoundaryConditionData* msg) {
  return *msg->flow_;
}
const ::PressureConditionData&
BoundaryConditionData::_Internal::pressure(const BoundaryConditionData* msg) {
  return *msg->pressure_;
}
BoundaryConditionData::BoundaryConditionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoundaryConditionData)
}
BoundaryConditionData::BoundaryConditionData(const BoundaryConditionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      substance_(from.substance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_flow()) {
    flow_ = new ::FlowConditionData(*from.flow_);
  } else {
    flow_ = nullptr;
  }
  if (from.has_pressure()) {
    pressure_ = new ::PressureConditionData(*from.pressure_);
  } else {
    pressure_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:BoundaryConditionData)
}

void BoundaryConditionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&flow_)) + sizeof(id_));
}

BoundaryConditionData::~BoundaryConditionData() {
  // @@protoc_insertion_point(destructor:BoundaryConditionData)
  SharedDtor();
}

void BoundaryConditionData::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete flow_;
  if (this != internal_default_instance()) delete pressure_;
}

void BoundaryConditionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryConditionData& BoundaryConditionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryConditionData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void BoundaryConditionData::Clear() {
// @@protoc_insertion_point(message_clear_start:BoundaryConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  substance_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && flow_ != nullptr) {
    delete flow_;
  }
  flow_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pressure_ != nullptr) {
    delete pressure_;
  }
  pressure_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundaryConditionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "BoundaryConditionData.Name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .FlowConditionData Flow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PressureConditionData Pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_pressure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SubstanceData Substance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_substance(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundaryConditionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoundaryConditionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BoundaryConditionData.Name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .FlowConditionData Flow = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PressureConditionData Pressure = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pressure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SubstanceData Substance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_substance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoundaryConditionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoundaryConditionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundaryConditionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoundaryConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BoundaryConditionData.Name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .FlowConditionData Flow = 3;
  if (this->has_flow()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::flow(this), output);
  }

  // .PressureConditionData Pressure = 4;
  if (this->has_pressure()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::pressure(this), output);
  }

  // repeated .SubstanceData Substance = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substance_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->substance(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BoundaryConditionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryConditionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoundaryConditionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BoundaryConditionData.Name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .FlowConditionData Flow = 3;
  if (this->has_flow()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::flow(this), target);
  }

  // .PressureConditionData Pressure = 4;
  if (this->has_pressure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::pressure(this), target);
  }

  // repeated .SubstanceData Substance = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->substance_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->substance(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoundaryConditionData)
  return target;
}

size_t BoundaryConditionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoundaryConditionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SubstanceData Substance = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->substance_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->substance(static_cast<int>(i)));
    }
  }

  // string Name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .FlowConditionData Flow = 3;
  if (this->has_flow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flow_);
  }

  // .PressureConditionData Pressure = 4;
  if (this->has_pressure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pressure_);
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryConditionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoundaryConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryConditionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryConditionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoundaryConditionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoundaryConditionData)
    MergeFrom(*source);
  }
}

void BoundaryConditionData::MergeFrom(const BoundaryConditionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoundaryConditionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  substance_.MergeFrom(from.substance_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_flow()) {
    mutable_flow()->::FlowConditionData::MergeFrom(from.flow());
  }
  if (from.has_pressure()) {
    mutable_pressure()->::PressureConditionData::MergeFrom(from.pressure());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void BoundaryConditionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoundaryConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryConditionData::CopyFrom(const BoundaryConditionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoundaryConditionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryConditionData::IsInitialized() const {
  return true;
}

void BoundaryConditionData::InternalSwap(BoundaryConditionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&substance_)->InternalSwap(CastToBase(&other->substance_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flow_, other->flow_);
  swap(pressure_, other->pressure_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryConditionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundaryConditionsData::InitAsDefaultInstance() {
  ::_BoundaryConditionsData_default_instance_._instance.get_mutable()->inlet_ = const_cast< ::BoundaryConditionData*>(
      ::BoundaryConditionData::internal_default_instance());
  ::_BoundaryConditionsData_default_instance_._instance.get_mutable()->outlet_ = const_cast< ::BoundaryConditionData*>(
      ::BoundaryConditionData::internal_default_instance());
}
class BoundaryConditionsData::_Internal {
 public:
  static const ::BoundaryConditionData& inlet(const BoundaryConditionsData* msg);
  static const ::BoundaryConditionData& outlet(const BoundaryConditionsData* msg);
};

const ::BoundaryConditionData&
BoundaryConditionsData::_Internal::inlet(const BoundaryConditionsData* msg) {
  return *msg->inlet_;
}
const ::BoundaryConditionData&
BoundaryConditionsData::_Internal::outlet(const BoundaryConditionsData* msg) {
  return *msg->outlet_;
}
BoundaryConditionsData::BoundaryConditionsData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoundaryConditionsData)
}
BoundaryConditionsData::BoundaryConditionsData(const BoundaryConditionsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inlet()) {
    inlet_ = new ::BoundaryConditionData(*from.inlet_);
  } else {
    inlet_ = nullptr;
  }
  if (from.has_outlet()) {
    outlet_ = new ::BoundaryConditionData(*from.outlet_);
  } else {
    outlet_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BoundaryConditionsData)
}

void BoundaryConditionsData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto.base);
  ::memset(&inlet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outlet_) -
      reinterpret_cast<char*>(&inlet_)) + sizeof(outlet_));
}

BoundaryConditionsData::~BoundaryConditionsData() {
  // @@protoc_insertion_point(destructor:BoundaryConditionsData)
  SharedDtor();
}

void BoundaryConditionsData::SharedDtor() {
  if (this != internal_default_instance()) delete inlet_;
  if (this != internal_default_instance()) delete outlet_;
}

void BoundaryConditionsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryConditionsData& BoundaryConditionsData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryConditionsData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void BoundaryConditionsData::Clear() {
// @@protoc_insertion_point(message_clear_start:BoundaryConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && inlet_ != nullptr) {
    delete inlet_;
  }
  inlet_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && outlet_ != nullptr) {
    delete outlet_;
  }
  outlet_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundaryConditionsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BoundaryConditionData Inlet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_inlet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BoundaryConditionData Outlet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_outlet(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundaryConditionsData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoundaryConditionsData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BoundaryConditionData Inlet = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inlet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BoundaryConditionData Outlet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_outlet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoundaryConditionsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoundaryConditionsData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundaryConditionsData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoundaryConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundaryConditionData Inlet = 1;
  if (this->has_inlet()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::inlet(this), output);
  }

  // .BoundaryConditionData Outlet = 2;
  if (this->has_outlet()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::outlet(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BoundaryConditionsData)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryConditionsData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoundaryConditionsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundaryConditionData Inlet = 1;
  if (this->has_inlet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::inlet(this), target);
  }

  // .BoundaryConditionData Outlet = 2;
  if (this->has_outlet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::outlet(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoundaryConditionsData)
  return target;
}

size_t BoundaryConditionsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoundaryConditionsData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BoundaryConditionData Inlet = 1;
  if (this->has_inlet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inlet_);
  }

  // .BoundaryConditionData Outlet = 2;
  if (this->has_outlet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outlet_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryConditionsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoundaryConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryConditionsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryConditionsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoundaryConditionsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoundaryConditionsData)
    MergeFrom(*source);
  }
}

void BoundaryConditionsData::MergeFrom(const BoundaryConditionsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoundaryConditionsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inlet()) {
    mutable_inlet()->::BoundaryConditionData::MergeFrom(from.inlet());
  }
  if (from.has_outlet()) {
    mutable_outlet()->::BoundaryConditionData::MergeFrom(from.outlet());
  }
}

void BoundaryConditionsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoundaryConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryConditionsData::CopyFrom(const BoundaryConditionsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoundaryConditionsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryConditionsData::IsInitialized() const {
  return true;
}

void BoundaryConditionsData::InternalSwap(BoundaryConditionsData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(inlet_, other->inlet_);
  swap(outlet_, other->outlet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryConditionsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundaryConditionsListData::InitAsDefaultInstance() {
}
class BoundaryConditionsListData::_Internal {
 public:
};

BoundaryConditionsListData::BoundaryConditionsListData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoundaryConditionsListData)
}
BoundaryConditionsListData::BoundaryConditionsListData(const BoundaryConditionsListData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      boundaryconditions_(from.boundaryconditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BoundaryConditionsListData)
}

void BoundaryConditionsListData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto.base);
}

BoundaryConditionsListData::~BoundaryConditionsListData() {
  // @@protoc_insertion_point(destructor:BoundaryConditionsListData)
  SharedDtor();
}

void BoundaryConditionsListData::SharedDtor() {
}

void BoundaryConditionsListData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundaryConditionsListData& BoundaryConditionsListData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundaryConditionsListData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void BoundaryConditionsListData::Clear() {
// @@protoc_insertion_point(message_clear_start:BoundaryConditionsListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundaryconditions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundaryConditionsListData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BoundaryConditionsData BoundaryConditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundaryconditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundaryConditionsListData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoundaryConditionsListData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BoundaryConditionsData BoundaryConditions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundaryconditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoundaryConditionsListData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoundaryConditionsListData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundaryConditionsListData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoundaryConditionsListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BoundaryConditionsData BoundaryConditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundaryconditions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->boundaryconditions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BoundaryConditionsListData)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundaryConditionsListData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoundaryConditionsListData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BoundaryConditionsData BoundaryConditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundaryconditions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->boundaryconditions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BoundaryConditionsListData)
  return target;
}

size_t BoundaryConditionsListData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BoundaryConditionsListData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BoundaryConditionsData BoundaryConditions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->boundaryconditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundaryconditions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryConditionsListData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoundaryConditionsListData)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryConditionsListData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundaryConditionsListData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoundaryConditionsListData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoundaryConditionsListData)
    MergeFrom(*source);
  }
}

void BoundaryConditionsListData::MergeFrom(const BoundaryConditionsListData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoundaryConditionsListData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundaryconditions_.MergeFrom(from.boundaryconditions_);
}

void BoundaryConditionsListData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoundaryConditionsListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryConditionsListData::CopyFrom(const BoundaryConditionsListData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoundaryConditionsListData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryConditionsListData::IsInitialized() const {
  return true;
}

void BoundaryConditionsListData::InternalSwap(BoundaryConditionsListData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&boundaryconditions_)->InternalSwap(CastToBase(&other->boundaryconditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundaryConditionsListData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarchData::InitAsDefaultInstance() {
}
class MarchData::_Internal {
 public:
};

MarchData::MarchData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MarchData)
}
MarchData::MarchData(const MarchData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_s_ = from.duration_s_;
  // @@protoc_insertion_point(copy_constructor:MarchData)
}

void MarchData::SharedCtor() {
  duration_s_ = 0;
}

MarchData::~MarchData() {
  // @@protoc_insertion_point(destructor:MarchData)
  SharedDtor();
}

void MarchData::SharedDtor() {
}

void MarchData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarchData& MarchData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarchData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void MarchData::Clear() {
// @@protoc_insertion_point(message_clear_start:MarchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_s_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MarchData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double Duration_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MarchData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:MarchData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double Duration_s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MarchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MarchData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MarchData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MarchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Duration_s = 1;
  if (!(this->duration_s() <= 0 && this->duration_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->duration_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MarchData)
}

::PROTOBUF_NAMESPACE_ID::uint8* MarchData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MarchData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double Duration_s = 1;
  if (!(this->duration_s() <= 0 && this->duration_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->duration_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MarchData)
  return target;
}

size_t MarchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MarchData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Duration_s = 1;
  if (!(this->duration_s() <= 0 && this->duration_s() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarchData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MarchData)
  GOOGLE_DCHECK_NE(&from, this);
  const MarchData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarchData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MarchData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MarchData)
    MergeFrom(*source);
  }
}

void MarchData::MergeFrom(const MarchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MarchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.duration_s() <= 0 && from.duration_s() >= 0)) {
    set_duration_s(from.duration_s());
  }
}

void MarchData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MarchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarchData::CopyFrom(const MarchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MarchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarchData::IsInitialized() const {
  return true;
}

void MarchData::InternalSwap(MarchData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_s_, other->duration_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarchData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopData::InitAsDefaultInstance() {
}
class StopData::_Internal {
 public:
};

StopData::StopData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopData)
}
StopData::StopData(const StopData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StopData)
}

void StopData::SharedCtor() {
}

StopData::~StopData() {
  // @@protoc_insertion_point(destructor:StopData)
  SharedDtor();
}

void StopData::SharedDtor() {
}

void StopData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopData& StopData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void StopData::Clear() {
// @@protoc_insertion_point(message_clear_start:StopData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:StopData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StopData)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StopData)
  return target;
}

size_t StopData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopData)
  GOOGLE_DCHECK_NE(&from, this);
  const StopData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopData)
    MergeFrom(*source);
  }
}

void StopData::MergeFrom(const StopData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopData::CopyFrom(const StopData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopData::IsInitialized() const {
  return true;
}

void StopData::InternalSwap(StopData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInterchangeData::InitAsDefaultInstance() {
  ::_ModelInterchangeData_default_instance_.boundaryexchangelist_ = const_cast< ::BoundaryConditionsListData*>(
      ::BoundaryConditionsListData::internal_default_instance());
  ::_ModelInterchangeData_default_instance_.march_ = const_cast< ::MarchData*>(
      ::MarchData::internal_default_instance());
  ::_ModelInterchangeData_default_instance_.stop_ = const_cast< ::StopData*>(
      ::StopData::internal_default_instance());
}
class ModelInterchangeData::_Internal {
 public:
  static const ::BoundaryConditionsListData& boundaryexchangelist(const ModelInterchangeData* msg);
  static const ::MarchData& march(const ModelInterchangeData* msg);
  static const ::StopData& stop(const ModelInterchangeData* msg);
};

const ::BoundaryConditionsListData&
ModelInterchangeData::_Internal::boundaryexchangelist(const ModelInterchangeData* msg) {
  return *msg->Command_.boundaryexchangelist_;
}
const ::MarchData&
ModelInterchangeData::_Internal::march(const ModelInterchangeData* msg) {
  return *msg->Command_.march_;
}
const ::StopData&
ModelInterchangeData::_Internal::stop(const ModelInterchangeData* msg) {
  return *msg->Command_.stop_;
}
void ModelInterchangeData::set_allocated_boundaryexchangelist(::BoundaryConditionsListData* boundaryexchangelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (boundaryexchangelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      boundaryexchangelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundaryexchangelist, submessage_arena);
    }
    set_has_boundaryexchangelist();
    Command_.boundaryexchangelist_ = boundaryexchangelist;
  }
  // @@protoc_insertion_point(field_set_allocated:ModelInterchangeData.BoundaryExchangeList)
}
void ModelInterchangeData::set_allocated_march(::MarchData* march) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (march) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      march = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, march, submessage_arena);
    }
    set_has_march();
    Command_.march_ = march;
  }
  // @@protoc_insertion_point(field_set_allocated:ModelInterchangeData.March)
}
void ModelInterchangeData::set_allocated_stop(::StopData* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_Command();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    Command_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:ModelInterchangeData.Stop)
}
ModelInterchangeData::ModelInterchangeData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ModelInterchangeData)
}
ModelInterchangeData::ModelInterchangeData(const ModelInterchangeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_Command();
  switch (from.Command_case()) {
    case kBoundaryExchangeList: {
      mutable_boundaryexchangelist()->::BoundaryConditionsListData::MergeFrom(from.boundaryexchangelist());
      break;
    }
    case kMarch: {
      mutable_march()->::MarchData::MergeFrom(from.march());
      break;
    }
    case kStop: {
      mutable_stop()->::StopData::MergeFrom(from.stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ModelInterchangeData)
}

void ModelInterchangeData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto.base);
  clear_has_Command();
}

ModelInterchangeData::~ModelInterchangeData() {
  // @@protoc_insertion_point(destructor:ModelInterchangeData)
  SharedDtor();
}

void ModelInterchangeData::SharedDtor() {
  if (has_Command()) {
    clear_Command();
  }
}

void ModelInterchangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInterchangeData& ModelInterchangeData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInterchangeData_ComputationalLifeProtocol_2eproto.base);
  return *internal_default_instance();
}


void ModelInterchangeData::clear_Command() {
// @@protoc_insertion_point(one_of_clear_start:ModelInterchangeData)
  switch (Command_case()) {
    case kBoundaryExchangeList: {
      delete Command_.boundaryexchangelist_;
      break;
    }
    case kMarch: {
      delete Command_.march_;
      break;
    }
    case kStop: {
      delete Command_.stop_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void ModelInterchangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:ModelInterchangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Command();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ModelInterchangeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BoundaryConditionsListData BoundaryExchangeList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_boundaryexchangelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MarchData March = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_march(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StopData Stop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ModelInterchangeData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ModelInterchangeData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BoundaryConditionsListData BoundaryExchangeList = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_boundaryexchangelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MarchData March = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_march()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StopData Stop = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ModelInterchangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ModelInterchangeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ModelInterchangeData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ModelInterchangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundaryConditionsListData BoundaryExchangeList = 1;
  if (has_boundaryexchangelist()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::boundaryexchangelist(this), output);
  }

  // .MarchData March = 2;
  if (has_march()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::march(this), output);
  }

  // .StopData Stop = 3;
  if (has_stop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::stop(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ModelInterchangeData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInterchangeData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelInterchangeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BoundaryConditionsListData BoundaryExchangeList = 1;
  if (has_boundaryexchangelist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::boundaryexchangelist(this), target);
  }

  // .MarchData March = 2;
  if (has_march()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::march(this), target);
  }

  // .StopData Stop = 3;
  if (has_stop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::stop(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelInterchangeData)
  return target;
}

size_t ModelInterchangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModelInterchangeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Command_case()) {
    // .BoundaryConditionsListData BoundaryExchangeList = 1;
    case kBoundaryExchangeList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.boundaryexchangelist_);
      break;
    }
    // .MarchData March = 2;
    case kMarch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.march_);
      break;
    }
    // .StopData Stop = 3;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Command_.stop_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInterchangeData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ModelInterchangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInterchangeData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInterchangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ModelInterchangeData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ModelInterchangeData)
    MergeFrom(*source);
  }
}

void ModelInterchangeData::MergeFrom(const ModelInterchangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModelInterchangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Command_case()) {
    case kBoundaryExchangeList: {
      mutable_boundaryexchangelist()->::BoundaryConditionsListData::MergeFrom(from.boundaryexchangelist());
      break;
    }
    case kMarch: {
      mutable_march()->::MarchData::MergeFrom(from.march());
      break;
    }
    case kStop: {
      mutable_stop()->::StopData::MergeFrom(from.stop());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void ModelInterchangeData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ModelInterchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInterchangeData::CopyFrom(const ModelInterchangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModelInterchangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInterchangeData::IsInitialized() const {
  return true;
}

void ModelInterchangeData::InternalSwap(ModelInterchangeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(Command_, other->Command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInterchangeData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FlowConditionData* Arena::CreateMaybeMessage< ::FlowConditionData >(Arena* arena) {
  return Arena::CreateInternal< ::FlowConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::PressureConditionData* Arena::CreateMaybeMessage< ::PressureConditionData >(Arena* arena) {
  return Arena::CreateInternal< ::PressureConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::ConcentrationConditionData* Arena::CreateMaybeMessage< ::ConcentrationConditionData >(Arena* arena) {
  return Arena::CreateInternal< ::ConcentrationConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::SubstanceData* Arena::CreateMaybeMessage< ::SubstanceData >(Arena* arena) {
  return Arena::CreateInternal< ::SubstanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::BoundaryConditionData* Arena::CreateMaybeMessage< ::BoundaryConditionData >(Arena* arena) {
  return Arena::CreateInternal< ::BoundaryConditionData >(arena);
}
template<> PROTOBUF_NOINLINE ::BoundaryConditionsData* Arena::CreateMaybeMessage< ::BoundaryConditionsData >(Arena* arena) {
  return Arena::CreateInternal< ::BoundaryConditionsData >(arena);
}
template<> PROTOBUF_NOINLINE ::BoundaryConditionsListData* Arena::CreateMaybeMessage< ::BoundaryConditionsListData >(Arena* arena) {
  return Arena::CreateInternal< ::BoundaryConditionsListData >(arena);
}
template<> PROTOBUF_NOINLINE ::MarchData* Arena::CreateMaybeMessage< ::MarchData >(Arena* arena) {
  return Arena::CreateInternal< ::MarchData >(arena);
}
template<> PROTOBUF_NOINLINE ::StopData* Arena::CreateMaybeMessage< ::StopData >(Arena* arena) {
  return Arena::CreateInternal< ::StopData >(arena);
}
template<> PROTOBUF_NOINLINE ::ModelInterchangeData* Arena::CreateMaybeMessage< ::ModelInterchangeData >(Arena* arena) {
  return Arena::CreateInternal< ::ModelInterchangeData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
